#!/bin/bash

usage(){
  echo "Usage : Class1 Class2 -[a-Z] opt1 opt2 -[a-z] opt3 opt4"
  echo -e "\t-n:\tNamespaces"
  echo -e "\t-I:\tSystem include"
  echo -e "\t-i:\tPersonnal include"
  echo -e "\t-h:\tHeritance"

}
fill_method(){
  local i
  for i in `seq 1 $nbIndent`; do echo -n "  " >> $fileName; done
  echo "$1::$1(){}" >> $fileName
  for i in `seq 1 $nbIndent`; do echo -n "  ">> $fileName; done
  echo "$1::$1(const $1 &obj){}" >> $fileName
  for i in `seq 1 $nbIndent`; do echo -n "  ">> $fileName; done
  echo "$1 &$1::operator=(const $1 &obj){ return *this; }" >> $fileName
  for i in `seq 1 $nbIndent`; do echo -n "  ">> $fileName; done
  echo "$1::~$1(){}" >> $fileName
}
basic_method(){
  local i

  for i in `seq 1 $nbIndent`; do echo -n "  ">> $fileName; done
  echo " public:" >> $fileName

  for i in `seq 0 $nbIndent`; do echo -n "  ">> $fileName; done
  echo "$1();" >> $fileName
  for i in `seq 0 $nbIndent`; do echo -n "  ">> $fileName; done
  echo -e "$1(const $1 &obj);" >> $fileName
  for i in `seq 0 $nbIndent`; do echo -n "  ">> $fileName; done
  echo -e "$1\t&operator=(const $1 &obj);" >> $fileName
  for i in `seq 0 $nbIndent`; do echo -n "  ">> $fileName; done
  echo "~$1();" >> $fileName
}
print_start_class(){
  local i
  for i in `seq 1 $nbIndent`;do
    echo -n "  " >> $fileName
  done
  echo -n "class $1" >> $fileName
}

print_end_class(){
  local i
  for i in `seq 1 $nbIndent`; do echo -n "  ">> $fileName; done
  echo "};" >> $fileName
}

print_heritance(){
  local first=0
  local i
  for i in $@;do
    if [ "$first" == "1" ];then
      echo -n ", " >> $fileName
    else
      echo -n " : public " >> $fileName
    fi
    echo -n "$i" >> $fileName
  done
  echo "{" >> $fileName
}

print_inc_sys(){
  for i in $@; do
    echo "#include <$i>" >> $fileName
  done
}

print_inc_perso(){
  for i in $@; do
    echo "#include \"$i.hpp\"" >> $fileName
  done
}

print_header(){
    echo "/*" >> $1
    echo "**" >> $1
    echo "**" >> $1
    echo "**" >> $1
    echo "**" >> $1
    echo "**" >> $1
    echo "*/" >> $1
}

print_start_preprocess(){
    local fileName=$1
    local classUpper=$(echo "$2" | awk '{print toupper($0)}')

    echo -n "#ifndef __" >> $fileName
    echo -n $classUpper >> $fileName
    echo "__HPP_" >> $fileName
    echo -n "# define __" >> $fileName
    echo -n $classUpper >> $fileName
    echo "__HPP_" >> $fileName
}

print_end_preprocess(){
    local fileName=$1
    local class=$2

    echo -n "#endif /* !" >> $fileName
    echo -n $class >> $fileName
    echo "*/">> $fileName
}

open_namespace(){
    local i
    for i in ${namespace[*]}; do
      for j in `seq 1 $nbIndent`;do echo -n "  " >> $fileName;done
      echo "namespace $i{" >> $fileName
      let "nbIndent=$nbIndent+1"
    done
}

close_namespace(){
    local i
    let "nbIndent=$nbIndent-1"
    for ((i=${#namespace[@]}-1; i>=0; i--)); do
      for j in `seq 1 $nbIndent`;do echo -n "  " >> $fileName;done
      echo "}// !${namespace[$i]}" >> $fileName
      let "nbIndent=$nbIndent-1"
    done
}

get_class_name(){
    local -a opts=()
    declare on
    declare j
    j=0
    on=1
    for opt in $@; do
	if [ "$on" == "1" ] && [ "${opt:0:1}" != '-' ];then
	    opts[$j]=$opt
	    let "j=$j+1"
	elif [ "${opt:0:1}" == '-' ];then
	    let "on=0"
	fi
    done
    echo ${opts[*]}
}

get_namespace(){
    declare on
    declare j
    j=0
    on=0
    for opt in $@; do
	if [ "$on" == "1" ] && [ "${opt:0:1}" != '-' ];then
	    namespace[$j]=$opt
	    let "j=$j+1"
	fi
	if [ "${opt:0:2}" == '-n' ] || [ "${opt:0:2}" == '-N' ];then
	    let "on=1"
	elif [ "${opt:0:1}" == '-' ];then
	    let "on=0"
	fi
    done
    echo ${opts[*]}
}

get_heritage(){
    local -a opts=()
    declare on
    declare j
    j=0
    on=0
    for opt in $@; do
	if [ "$on" == "1" ] && [ "${opt:0:1}" != '-' ];then
	    opts[$j]=$opt
	    let "j=$j+1"
	fi
	if [ "${opt:0:2}" == '-h' ] || [ "${opt:0:2}" == '-H' ];then
	    let "on=1"
	elif [ "${opt:0:1}" == '-' ];then
	    let "on=0"
	fi
    done
    echo ${opts[*]}
}

get_inc_sys(){
    local -a opts=()
    declare on
    declare j
    j=0
    on=0
    for opt in $@; do
	if [ "$on" == "1" ] && [ "${opt:0:1}" != '-' ];then
	    opts[$j]=$opt
	    let "j=$j+1"
	fi
	if [ "${opt:0:2}" == '-I' ];then
	    let "on=1"
	elif [ "${opt:0:1}" == '-' ];then
	    let "on=0"
	fi
    done
    echo ${opts[*]}
}

get_inc_perso(){
    local -a opts=()
    declare on
    declare j
    j=0
    on=0
    for opt in $@; do
	if [ "$on" == "1" ] && [ "${opt:0:1}" != '-' ];then
	    opts[$j]=$opt
	    let "j=$j+1"
	fi
	if [ "${opt:0:2}" == '-i' ];then
	    let "on=1"
	elif [ "${opt:0:1}" == '-' ];then
	    let "on=0"
	fi
    done
    echo ${opts[*]}
    
}

declare namespace heritage i inc_sys inc_perso class_names fileName extHPP extCPP

if [ "$#" == "0" ];then
    usage
    exit 0
fi


get_namespace $@
heritage=$(get_heritage $@)
inc_sys=$(get_inc_sys $@)
inc_perso=$(get_inc_perso $@)
class_names=$(get_class_name $@)

fileName="${class_names[0]}.hh"
rm -rf $fileName
echo "la"
## Write .hpp
print_header $fileName
print_start_preprocess $fileName ${class_names[0]}
echo >> $fileName
print_inc_sys $inc_sys
print_inc_perso $inc_perso
echo >> $fileName
nbIndent=0
open_namespace
print_start_class ${class_names[0]}
print_heritance ${heritage[*]}
basic_method ${class_names[0]}
print_end_class
close_namespace
print_end_preprocess $fileName ${class_names[0]}

## Write .cpp
fileName="${class_names[0]}.cpp"
rm -rf $fileName
nbIndent=0
print_header $fileName
print_inc_sys $inc_sys
echo "#include \"${class_names[0]}.hh\"" >> $fileName
echo >> $fileName
open_namespace
fill_method ${class_names[0]}
close_namespace
echo "COUCOU";
exit 0
